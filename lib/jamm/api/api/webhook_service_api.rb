# frozen_string_literal: true

# #Jamm API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 1.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require 'cgi'

module Api
  class WebhookServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Error placeholder. This method is not implemented on Jamm backend.
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @return [ErrorResponse]
    def webhook_service_error(body, opts = {})
      data, _status_code, _headers = webhook_service_error_with_http_info(body, opts)
      data
    end

    # Error placeholder. This method is not implemented on Jamm backend.
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorResponse, Integer, Hash)>] ErrorResponse data, response status code and response headers
    def webhook_service_error_with_http_info(body, opts = {})
      @api_client.config.logger.debug 'Calling API: WebhookServiceApi.webhook_service_error ...' if @api_client.config.debugging
      # verify the required parameter 'body' is set
      raise ArgumentError, "Missing the required parameter 'body' when calling WebhookServiceApi.webhook_service_error" if @api_client.config.client_side_validation && body.nil?

      # resource path
      local_var_path = '/errors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ErrorResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhookServiceApi.webhook_service_error",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: WebhookServiceApi#webhook_service_error\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Message placeholder. This method is not implemented on Jamm backend.
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def webhook_service_message(body, opts = {})
      data, _status_code, _headers = webhook_service_message_with_http_info(body, opts)
      data
    end

    # Message placeholder. This method is not implemented on Jamm backend.
    # @param body [Object]
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def webhook_service_message_with_http_info(body, opts = {})
      @api_client.config.logger.debug 'Calling API: WebhookServiceApi.webhook_service_message ...' if @api_client.config.debugging
      # verify the required parameter 'body' is set
      raise ArgumentError, "Missing the required parameter 'body' when calling WebhookServiceApi.webhook_service_message" if @api_client.config.client_side_validation && body.nil?

      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"WebhookServiceApi.webhook_service_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: WebhookServiceApi#webhook_service_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
