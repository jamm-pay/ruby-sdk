=begin
#Jamm API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Api
  class PaymentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Use existing contract with charge
    # Use existing contract with charge
    # @param body [AddChargeRequest] This message represents a request to add a charge to an existing customer. It contains all necessary information to process a new payment transaction.
    # @param [Hash] opts the optional parameters
    # @return [AddChargeResponse]
    def add_charge(body, opts = {})
      data, _status_code, _headers = add_charge_with_http_info(body, opts)
      data
    end

    # Use existing contract with charge
    # Use existing contract with charge
    # @param body [AddChargeRequest] This message represents a request to add a charge to an existing customer. It contains all necessary information to process a new payment transaction.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddChargeResponse, Integer, Hash)>] AddChargeResponse data, response status code and response headers
    def add_charge_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.add_charge ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PaymentApi.add_charge"
      end
      # resource path
      local_var_path = '/v1/add-charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AddChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.add_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#add_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a contract with initial charge
    # Create a contract with initial charge
    # @param body [CreateContractWithChargeRequest] Request message for creating a new contract with an immediate initial charge. This combines contract creation and charging in a single operation.
    # @param [Hash] opts the optional parameters
    # @return [CreateContractWithChargeResponse]
    def create_contract_with_charge(body, opts = {})
      data, _status_code, _headers = create_contract_with_charge_with_http_info(body, opts)
      data
    end

    # Create a contract with initial charge
    # Create a contract with initial charge
    # @param body [CreateContractWithChargeRequest] Request message for creating a new contract with an immediate initial charge. This combines contract creation and charging in a single operation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateContractWithChargeResponse, Integer, Hash)>] CreateContractWithChargeResponse data, response status code and response headers
    def create_contract_with_charge_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.create_contract_with_charge ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PaymentApi.create_contract_with_charge"
      end
      # resource path
      local_var_path = '/v1/contract-with-charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateContractWithChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.create_contract_with_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#create_contract_with_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a contract without initial charge (contract only)
    # Create a contract without initial charge (contract only)
    # @param body [CreateContractWithoutChargeRequest] Request message for creating a new contract without an initial charge. This is typically used when setting up a billing relationship before any actual charges are processed.
    # @param [Hash] opts the optional parameters
    # @return [CreateContractWithoutChargeResponse]
    def create_contract_without_charge(body, opts = {})
      data, _status_code, _headers = create_contract_without_charge_with_http_info(body, opts)
      data
    end

    # Create a contract without initial charge (contract only)
    # Create a contract without initial charge (contract only)
    # @param body [CreateContractWithoutChargeRequest] Request message for creating a new contract without an initial charge. This is typically used when setting up a billing relationship before any actual charges are processed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateContractWithoutChargeResponse, Integer, Hash)>] CreateContractWithoutChargeResponse data, response status code and response headers
    def create_contract_without_charge_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.create_contract_without_charge ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PaymentApi.create_contract_without_charge"
      end
      # resource path
      local_var_path = '/v1/contract-without-charge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateContractWithoutChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.create_contract_without_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#create_contract_without_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific charge
    # Get a specific charge information
    # @param charge [String] @gotags: validate:\&quot;required\&quot;
    # @param [Hash] opts the optional parameters
    # @return [GetChargeResponse]
    def get_charge(charge, opts = {})
      data, _status_code, _headers = get_charge_with_http_info(charge, opts)
      data
    end

    # Get a specific charge
    # Get a specific charge information
    # @param charge [String] @gotags: validate:\&quot;required\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetChargeResponse, Integer, Hash)>] GetChargeResponse data, response status code and response headers
    def get_charge_with_http_info(charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.get_charge ...'
      end
      # verify the required parameter 'charge' is set
      if @api_client.config.client_side_validation && charge.nil?
        fail ArgumentError, "Missing the required parameter 'charge' when calling PaymentApi.get_charge"
      end
      # resource path
      local_var_path = '/v1/charge/{charge}'.sub('{' + 'charge' + '}', CGI.escape(charge.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChargeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.get_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#get_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of charges
    # Get a list of charges for a customer
    # @param customer [String] @gotags: validate:\&quot;required\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :pagination_page_size
    # @option opts [String] :pagination_page_token
    # @return [GetChargesResponse]
    def get_charges(customer, opts = {})
      data, _status_code, _headers = get_charges_with_http_info(customer, opts)
      data
    end

    # Get a list of charges
    # Get a list of charges for a customer
    # @param customer [String] @gotags: validate:\&quot;required\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :pagination_page_size
    # @option opts [String] :pagination_page_token
    # @return [Array<(GetChargesResponse, Integer, Hash)>] GetChargesResponse data, response status code and response headers
    def get_charges_with_http_info(customer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.get_charges ...'
      end
      # verify the required parameter 'customer' is set
      if @api_client.config.client_side_validation && customer.nil?
        fail ArgumentError, "Missing the required parameter 'customer' when calling PaymentApi.get_charges"
      end
      # resource path
      local_var_path = '/v1/charges/{customer}'.sub('{' + 'customer' + '}', CGI.escape(customer.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pagination.pageSize'] = opts[:'pagination_page_size'] if !opts[:'pagination_page_size'].nil?
      query_params[:'pagination.pageToken'] = opts[:'pagination_page_token'] if !opts[:'pagination_page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetChargesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.get_charges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#get_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process payment directly without redirect
    # Execute a payment off-session within your application without redirecting to a payment page.
    # @param body [OffSessionPaymentRequest] This message represents a request to process a payment directly within the application. It contains the customer ID and charge details to be processed.
    # @param [Hash] opts the optional parameters
    # @return [OffSessionPaymentResponse]
    def off_session_payment(body, opts = {})
      data, _status_code, _headers = off_session_payment_with_http_info(body, opts)
      data
    end

    # Process payment directly without redirect
    # Execute a payment off-session within your application without redirecting to a payment page.
    # @param body [OffSessionPaymentRequest] This message represents a request to process a payment directly within the application. It contains the customer ID and charge details to be processed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OffSessionPaymentResponse, Integer, Hash)>] OffSessionPaymentResponse data, response status code and response headers
    def off_session_payment_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.off_session_payment ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PaymentApi.off_session_payment"
      end
      # resource path
      local_var_path = '/v1/payments/off-session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'OffSessionPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.off_session_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#off_session_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process payment with optional redirect
    # Unified interface for creating payments - supports existing customers, new customers with charges, and contract-only creation.
    # @param body [OnSessionPaymentRequest] Request message for the unified payment interface. The system intelligently routes the request to the appropriate payment method based on the provided parameters.
    # @param [Hash] opts the optional parameters
    # @return [OnSessionPaymentResponse]
    def on_session_payment(body, opts = {})
      data, _status_code, _headers = on_session_payment_with_http_info(body, opts)
      data
    end

    # Process payment with optional redirect
    # Unified interface for creating payments - supports existing customers, new customers with charges, and contract-only creation.
    # @param body [OnSessionPaymentRequest] Request message for the unified payment interface. The system intelligently routes the request to the appropriate payment method based on the provided parameters.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OnSessionPaymentResponse, Integer, Hash)>] OnSessionPaymentResponse data, response status code and response headers
    def on_session_payment_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.on_session_payment ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PaymentApi.on_session_payment"
      end
      # resource path
      local_var_path = '/v1/payments/on-session'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'OnSessionPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.on_session_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#on_session_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Withdraw money from customer immediately, without redirect
    # This call is synchronous. The money will be withdrawn immediately.
    # @param body [WithdrawRequest] This message represents a request to withdraw money from a customer. It contains the customer ID and the amount to withdraw.
    # @param [Hash] opts the optional parameters
    # @return [WithdrawResponse]
    def withdraw(body, opts = {})
      data, _status_code, _headers = withdraw_with_http_info(body, opts)
      data
    end

    # Withdraw money from customer immediately, without redirect
    # This call is synchronous. The money will be withdrawn immediately.
    # @param body [WithdrawRequest] This message represents a request to withdraw money from a customer. It contains the customer ID and the amount to withdraw.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WithdrawResponse, Integer, Hash)>] WithdrawResponse data, response status code and response headers
    def withdraw_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentApi.withdraw ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PaymentApi.withdraw"
      end
      # resource path
      local_var_path = '/v1/withdraw'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'WithdrawResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentApi.withdraw",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#withdraw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
