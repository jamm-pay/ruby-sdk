=begin
#Jamm API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Api
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create customer
    # Intended for pre-registering merchant customer into Jamm.
    # @param body [CreateCustomerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateCustomerResponse]
    def create(body, opts = {})
      data, _status_code, _headers = create_with_http_info(body, opts)
      data
    end

    # Create customer
    # Intended for pre-registering merchant customer into Jamm.
    # @param body [CreateCustomerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCustomerResponse, Integer, Hash)>] CreateCustomerResponse data, response status code and response headers
    def create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomerApi.create"
      end
      # resource path
      local_var_path = '/v1/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CustomerApi.create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete customer
    # Delete customer from Jamm.
    # @param customer [String] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteCustomerResponse]
    def delete(customer, opts = {})
      data, _status_code, _headers = delete_with_http_info(customer, opts)
      data
    end

    # Delete customer
    # Delete customer from Jamm.
    # @param customer [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteCustomerResponse, Integer, Hash)>] DeleteCustomerResponse data, response status code and response headers
    def delete_with_http_info(customer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.delete ...'
      end
      # verify the required parameter 'customer' is set
      if @api_client.config.client_side_validation && customer.nil?
        fail ArgumentError, "Missing the required parameter 'customer' when calling CustomerApi.delete"
      end
      # resource path
      local_var_path = '/v1/customers/{customer}'.sub('{' + 'customer' + '}', CGI.escape(customer.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CustomerApi.delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get customer
    # Retrieve a merchant customer from Jamm. The merchant customer must be registered in Jamm.
    # @param customer [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetCustomerResponse]
    def get(customer, opts = {})
      data, _status_code, _headers = get_with_http_info(customer, opts)
      data
    end

    # Get customer
    # Retrieve a merchant customer from Jamm. The merchant customer must be registered in Jamm.
    # @param customer [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCustomerResponse, Integer, Hash)>] GetCustomerResponse data, response status code and response headers
    def get_with_http_info(customer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get ...'
      end
      # verify the required parameter 'customer' is set
      if @api_client.config.client_side_validation && customer.nil?
        fail ArgumentError, "Missing the required parameter 'customer' when calling CustomerApi.get"
      end
      # resource path
      local_var_path = '/v1/customers/{customer}'.sub('{' + 'customer' + '}', CGI.escape(customer.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CustomerApi.get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a contract belongs to the customer
    # Get a contract belongs to the customer
    # @param customer [String] @gotags: validate:\&quot;required\&quot;
    # @param [Hash] opts the optional parameters
    # @return [GetContractResponse]
    def get_contract(customer, opts = {})
      data, _status_code, _headers = get_contract_with_http_info(customer, opts)
      data
    end

    # Get a contract belongs to the customer
    # Get a contract belongs to the customer
    # @param customer [String] @gotags: validate:\&quot;required\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetContractResponse, Integer, Hash)>] GetContractResponse data, response status code and response headers
    def get_contract_with_http_info(customer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get_contract ...'
      end
      # verify the required parameter 'customer' is set
      if @api_client.config.client_side_validation && customer.nil?
        fail ArgumentError, "Missing the required parameter 'customer' when calling CustomerApi.get_contract"
      end
      # resource path
      local_var_path = '/v1/customers/{customer}/contract'.sub('{' + 'customer' + '}', CGI.escape(customer.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetContractResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CustomerApi.get_contract",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update customer
    # Update customer metadata when they updated their information in merchant e-commerce store.
    # @param customer [String] Immutable
    # @param body [CustomerServiceUpdateCustomerBody] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateCustomerResponse]
    def update(customer, body, opts = {})
      data, _status_code, _headers = update_with_http_info(customer, body, opts)
      data
    end

    # Update customer
    # Update customer metadata when they updated their information in merchant e-commerce store.
    # @param customer [String] Immutable
    # @param body [CustomerServiceUpdateCustomerBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateCustomerResponse, Integer, Hash)>] UpdateCustomerResponse data, response status code and response headers
    def update_with_http_info(customer, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.update ...'
      end
      # verify the required parameter 'customer' is set
      if @api_client.config.client_side_validation && customer.nil?
        fail ArgumentError, "Missing the required parameter 'customer' when calling CustomerApi.update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomerApi.update"
      end
      # resource path
      local_var_path = '/v1/customers/{customer}'.sub('{' + 'customer' + '}', CGI.escape(customer.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CustomerApi.update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
