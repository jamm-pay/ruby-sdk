# frozen_string_literal: true

# #Jamm API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 1.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require 'date'
require 'time'

module Api
  # Contains the result of a charge operation.
  class ChargeResult
    attr_accessor :charge_id, :description, :merchant_name, :initial_amount, :discount, :final_amount, :amount_refunded, :currency, :token_id, :metadata, :created_at, :updated_at, :processed_at

    # True when charged.
    attr_accessor :paid

    # Reason contains enum status in string. Merchant should not write any code depending on the reason, because Jamm may update the reason at any time.
    attr_accessor :reason

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :charge_id => :chargeId,
        :paid => :paid,
        :reason => :reason,
        :description => :description,
        :merchant_name => :merchantName,
        :initial_amount => :initialAmount,
        :discount => :discount,
        :final_amount => :finalAmount,
        :amount_refunded => :amountRefunded,
        :currency => :currency,
        :token_id => :tokenId,
        :metadata => :metadata,
        :created_at => :createdAt,
        :updated_at => :updatedAt,
        :processed_at => :processedAt
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :charge_id => :String,
        :paid => :Boolean,
        :reason => :String,
        :description => :String,
        :merchant_name => :String,
        :initial_amount => :Integer,
        :discount => :Integer,
        :final_amount => :Integer,
        :amount_refunded => :Integer,
        :currency => :String,
        :token_id => :String,
        :metadata => :'Hash<String, String>',
        :created_at => :Time,
        :updated_at => :Time,
        :processed_at => :Time
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `Api::ChargeResult` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `Api::ChargeResult`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.charge_id = attributes[:charge_id] if attributes.key?(:charge_id)

      self.paid = attributes[:paid] if attributes.key?(:paid)

      self.reason = attributes[:reason] if attributes.key?(:reason)

      self.description = attributes[:description] if attributes.key?(:description)

      self.merchant_name = attributes[:merchant_name] if attributes.key?(:merchant_name)

      self.initial_amount = attributes[:initial_amount] if attributes.key?(:initial_amount)

      self.discount = attributes[:discount] if attributes.key?(:discount)

      self.final_amount = attributes[:final_amount] if attributes.key?(:final_amount)

      self.amount_refunded = attributes[:amount_refunded] if attributes.key?(:amount_refunded)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.token_id = attributes[:token_id] if attributes.key?(:token_id)

      if attributes.key?(:metadata) && (value = attributes[:metadata]).is_a?(Hash)
        self.metadata = value
      end

      self.created_at = attributes[:created_at] if attributes.key?(:created_at)

      self.updated_at = attributes[:updated_at] if attributes.key?(:updated_at)

      return unless attributes.key?(:processed_at)

      self.processed_at = attributes[:processed_at]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        charge_id == other.charge_id &&
        paid == other.paid &&
        reason == other.reason &&
        description == other.description &&
        merchant_name == other.merchant_name &&
        initial_amount == other.initial_amount &&
        discount == other.discount &&
        final_amount == other.final_amount &&
        amount_refunded == other.amount_refunded &&
        currency == other.currency &&
        token_id == other.token_id &&
        metadata == other.metadata &&
        created_at == other.created_at &&
        updated_at == other.updated_at &&
        processed_at == other.processed_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [charge_id, paid, reason, description, merchant_name, initial_amount, discount, final_amount, amount_refunded, currency, token_id, metadata, created_at, updated_at, processed_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash[key.to_s] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Api.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
