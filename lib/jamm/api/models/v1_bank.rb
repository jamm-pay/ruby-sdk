# frozen_string_literal: true

# #Jamm API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 1.0
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.9.0
#

require 'date'
require 'time'

module Api
  class Bank
    attr_accessor :code, :name, :name_katakana, :name_hiragana, :name_alphabet, :assets, :quota, :opening_hours, :bankpay_scheduled_maintenances, :bank_scheduled_maintenances, :registration_scheduled_maintenances

    # True when Bankpay is currently available.
    attr_accessor :bankpay_available

    # True when Bank is currently available.
    attr_accessor :bank_available

    # True when registration is currently available.
    attr_accessor :registration_available

    # True when bank is operating, false when its not. Core UI is expected to navigate user to out-of-service page when this flag is set to false.  See Figma for more information: https://www.figma.com/design/7cabcqjzvKl9IwzvJCuQEW/Jamm-%CE%B2-UI-design?node-id=304-11253&t=oyEUrdVtFOMV9xut-4
    attr_accessor :operating

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :code => :code,
        :name => :name,
        :name_katakana => :nameKatakana,
        :name_hiragana => :nameHiragana,
        :name_alphabet => :nameAlphabet,
        :assets => :assets,
        :quota => :quota,
        :opening_hours => :openingHours,
        :bankpay_scheduled_maintenances => :bankpayScheduledMaintenances,
        :bank_scheduled_maintenances => :bankScheduledMaintenances,
        :registration_scheduled_maintenances => :registrationScheduledMaintenances,
        :bankpay_available => :bankpayAvailable,
        :bank_available => :bankAvailable,
        :registration_available => :registrationAvailable,
        :operating => :operating
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :code => :String,
        :name => :String,
        :name_katakana => :String,
        :name_hiragana => :String,
        :name_alphabet => :String,
        :assets => :BankAssets,
        :quota => :BankQuota,
        :opening_hours => :String,
        :bankpay_scheduled_maintenances => :'Array<BankScheduledMaintenancePeriod>',
        :bank_scheduled_maintenances => :'Array<BankScheduledMaintenancePeriod>',
        :registration_scheduled_maintenances => :'Array<BankScheduledMaintenancePeriod>',
        :bankpay_available => :Boolean,
        :bank_available => :Boolean,
        :registration_available => :Boolean,
        :operating => :Boolean
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `Api::Bank` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `Api::Bank`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.code = attributes[:code] if attributes.key?(:code)

      self.name = attributes[:name] if attributes.key?(:name)

      self.name_katakana = attributes[:name_katakana] if attributes.key?(:name_katakana)

      self.name_hiragana = attributes[:name_hiragana] if attributes.key?(:name_hiragana)

      self.name_alphabet = attributes[:name_alphabet] if attributes.key?(:name_alphabet)

      self.assets = attributes[:assets] if attributes.key?(:assets)

      self.quota = attributes[:quota] if attributes.key?(:quota)

      self.opening_hours = attributes[:opening_hours] if attributes.key?(:opening_hours)

      if attributes.key?(:bankpay_scheduled_maintenances) && (value = attributes[:bankpay_scheduled_maintenances]).is_a?(Array)
        self.bankpay_scheduled_maintenances = value
      end

      if attributes.key?(:bank_scheduled_maintenances) && (value = attributes[:bank_scheduled_maintenances]).is_a?(Array)
        self.bank_scheduled_maintenances = value
      end

      if attributes.key?(:registration_scheduled_maintenances) && (value = attributes[:registration_scheduled_maintenances]).is_a?(Array)
        self.registration_scheduled_maintenances = value
      end

      self.bankpay_available = attributes[:bankpay_available] if attributes.key?(:bankpay_available)

      self.bank_available = attributes[:bank_available] if attributes.key?(:bank_available)

      self.registration_available = attributes[:registration_available] if attributes.key?(:registration_available)

      return unless attributes.key?(:operating)

      self.operating = attributes[:operating]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        code == other.code &&
        name == other.name &&
        name_katakana == other.name_katakana &&
        name_hiragana == other.name_hiragana &&
        name_alphabet == other.name_alphabet &&
        assets == other.assets &&
        quota == other.quota &&
        opening_hours == other.opening_hours &&
        bankpay_scheduled_maintenances == other.bankpay_scheduled_maintenances &&
        bank_scheduled_maintenances == other.bank_scheduled_maintenances &&
        registration_scheduled_maintenances == other.registration_scheduled_maintenances &&
        bankpay_available == other.bankpay_available &&
        bank_available == other.bank_available &&
        registration_available == other.registration_available &&
        operating == other.operating
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, name, name_katakana, name_hiragana, name_alphabet, assets, quota, opening_hours, bankpay_scheduled_maintenances, bank_scheduled_maintenances, registration_scheduled_maintenances, bankpay_available, bank_available, registration_available, operating].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash[key.to_s] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash[key.to_s] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Api.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
